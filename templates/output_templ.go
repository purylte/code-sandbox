// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.747
package templates

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func Output(stdout string, stderr string) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div id=\"output-container\" class=\"font-sans\"><div class=\"flex border-b border-gray-200\"><button id=\"stdout-tab\" class=\"px-4 py-2 text-sm font-medium text-gray-600 bg-white rounded-t-lg hover:text-gray-800 focus:outline-none\" onclick=\"setActiveTab(&#39;stdout&#39;, this)\">stdout</button> <button id=\"stderr-tab\" class=\"px-4 py-2 text-sm font-medium text-gray-600 bg-white rounded-t-lg hover:text-gray-800 focus:outline-none\" onclick=\"setActiveTab(&#39;stderr&#39;, this)\">stderr</button></div><div id=\"stdout-content\" class=\"p-4 bg-white rounded-b-lg\"><pre class=\"text-sm text-gray-800 whitespace-pre-wrap\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var2 string
		templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs(stdout)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates/output.templ`, Line: 14, Col: 66}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</pre></div><div id=\"stderr-content\" class=\"p-4 bg-white rounded-b-lg\" hidden><pre class=\"text-sm text-red-600 whitespace-pre-wrap\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var3 string
		templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(stderr)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates/output.templ`, Line: 17, Col: 65}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</pre></div><script>\n            (function() {\n                function setActiveTab(tabName, clickedTab) {\n                    const container = document.getElementById('output-container');\n                    const tabs = container.querySelectorAll('button');\n                    const contents = container.querySelectorAll('div[id$=\"-content\"]');\n                    \n                    tabs.forEach(tab => {\n                        tab.classList.remove('text-black', 'bg-gray-200');\n                        tab.classList.add('text-gray-600', 'bg-white');\n                    });\n                    contents.forEach(content => content.hidden = true);\n                    \n                    clickedTab.classList.remove('text-gray-600', 'bg-white');\n                    clickedTab.classList.add('text-black', 'bg-gray-200');\n                    const activeContent = container.querySelector(`#${tabName}-content`);\n                    activeContent.hidden = false;\n                }\n\n                // Expose setActiveTab to global scope\n                window.setActiveTab = setActiveTab;\n\n                // Set initial active tab\n                setActiveTab('stdout', document.getElementById('stdout-tab'));\n\n                // Handle after swap event\n                document.body.addEventListener('htmx:afterSwap', function(evt) {\n                    if (evt.detail.target.id === \"output-container\") {\n                        setActiveTab('stdout', document.getElementById('stdout-tab'));\n                    }\n                });\n            })();\n        </script></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}
